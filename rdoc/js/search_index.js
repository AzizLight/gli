var search_data = {"index":{"searchIndex":["gli","app","badcommandline","command","commandlinetoken","commands","compoundcommand","customexit","dsl","options","standardexception","terminal","unknowncommand","unknowncommandargument","unknownglobalargument","<=>()","[]()","[]=()","accept()","action()","arg_name()","c()","command()","command_exists?()","command_exists?()","commands_from()","config_file()","d()","default_command()","default_command()","default_desc()","default_size()","default_size=()","default_value()","desc()","exit_code()","exit_code()","exit_now!()","f()","flag()","help_now!()","instance()","long_desc()","new()","new()","new()","new()","on_error()","post()","pre()","program_desc()","s()","size()","skips_post()","skips_pre()","switch()","use_openstruct()","version()","readme"],"longSearchIndex":["gli","gli::app","gli::badcommandline","gli::command","gli::commandlinetoken","gli::commands","gli::commands::compoundcommand","gli::customexit","gli::dsl","gli::options","gli::standardexception","gli::terminal","gli::unknowncommand","gli::unknowncommandargument","gli::unknownglobalargument","gli::commandlinetoken#<=>()","gli::options#[]()","gli::options#[]=()","gli::app#accept()","gli::command#action()","gli::dsl#arg_name()","gli::dsl#c()","gli::dsl#command()","gli::terminal#command_exists?()","gli::terminal::command_exists?()","gli::app#commands_from()","gli::app#config_file()","gli::dsl#d()","gli::app#default_command()","gli::command#default_command()","gli::command#default_desc()","gli::terminal::default_size()","gli::terminal::default_size=()","gli::dsl#default_value()","gli::dsl#desc()","gli::badcommandline#exit_code()","gli::standardexception#exit_code()","gli::app#exit_now!()","gli::dsl#f()","gli::dsl#flag()","gli::app#help_now!()","gli::terminal::instance()","gli::dsl#long_desc()","gli::command::new()","gli::commands::compoundcommand::new()","gli::customexit::new()","gli::unknowncommandargument::new()","gli::app#on_error()","gli::app#post()","gli::app#pre()","gli::app#program_desc()","gli::dsl#s()","gli::terminal#size()","gli::app#skips_post()","gli::app#skips_pre()","gli::dsl#switch()","gli::app#use_openstruct()","gli::app#version()",""],"info":[["GLI","","classes/GLI.html","",""],["GLI::App","","classes/GLI/App.html","","<p>A means to define and parse a command line interface that works as Git's\ndoes, in that you specify global ...\n"],["GLI::BadCommandLine","","classes/GLI/BadCommandLine.html","","<p>Indicates that the command line invocation was bad\n"],["GLI::Command","","classes/GLI/Command.html","","<p>A command to be run, in context of global flags and switches.  You are\ngiven an instance of this class ...\n"],["GLI::CommandLineToken","","classes/GLI/CommandLineToken.html","","<p>Abstract base class for a logical element of a command line, mostly so that\nsubclasses can have similar ...\n"],["GLI::Commands","","classes/GLI/Commands.html","",""],["GLI::Commands::CompoundCommand","","classes/GLI/Commands/CompoundCommand.html","","<p>A command that calls other commands in order\n"],["GLI::CustomExit","","classes/GLI/CustomExit.html","","<p>Raise this if you want to use an exit status that isn't the default\nprovided by GLI.  Note that GLI::App#exit_now! ...\n"],["GLI::DSL","","classes/GLI/DSL.html","","<p>The primary DSL for GLI.  This represents the methods shared between your\ntop-level app and the commands. ...\n"],["GLI::Options","","classes/GLI/Options.html","","<p>Subclass of <code>OpenStruct</code> that provides hash-like methods for #[]\nand #[]=.  Note that is is <strong>not</strong> a Hash ...\n"],["GLI::StandardException","","classes/GLI/StandardException.html","","<p>Mixed into all exceptions that GLI handles; you can use this to catch\nanything that came from GLI intentionally. ...\n"],["GLI::Terminal","","classes/GLI/Terminal.html","","<p>Class to encapsulate stuff about the terminal. This is useful to\napplication developers as a canonical ...\n"],["GLI::UnknownCommand","","classes/GLI/UnknownCommand.html","","<p>Indicates the bad command line was an unknown command\n"],["GLI::UnknownCommandArgument","","classes/GLI/UnknownCommandArgument.html","","<p>Indicates the bad command line was an unknown command argument\n"],["GLI::UnknownGlobalArgument","","classes/GLI/UnknownGlobalArgument.html","","<p>Indicates the bad command line was an unknown global argument\n"],["<=>","GLI::CommandLineToken","classes/GLI/CommandLineToken.html#method-i-3C-3D-3E","(other)","<p>Sort based on primary name\n"],["[]","GLI::Options","classes/GLI/Options.html#method-i-5B-5D","(k)","<p>Return the value of an attribute\n"],["[]=","GLI::Options","classes/GLI/Options.html#method-i-5B-5D-3D","(k, v)","<p>Set the value of an attribute\n"],["accept","GLI::App","classes/GLI/App.html#method-i-accept","(object,&block)","<p>Configure a type conversion not already provided by the underlying\nOptionParser. This works more or less ...\n"],["action","GLI::Command","classes/GLI/Command.html#method-i-action","(&block)","<p>Define the action to take when the user executes this command.  Every\ncommand should either define this ...\n"],["arg_name","GLI::DSL","classes/GLI/DSL.html#method-i-arg_name","(name)","<p>Describe the argument name of the next flag.  It's important to keep this\nVERY short and, ideally, without ...\n"],["c","GLI::DSL","classes/GLI/DSL.html#method-i-c","(*names)",""],["command","GLI::DSL","classes/GLI/DSL.html#method-i-command","(*names)","<p>Define a new command.  This can be done in a few ways, but the most common\nmethod is to pass a symbol ...\n"],["command_exists?","GLI::Terminal","classes/GLI/Terminal.html#method-i-command_exists-3F","(command)",""],["command_exists?","GLI::Terminal","classes/GLI/Terminal.html#method-c-command_exists-3F","(command)","<p>Returns true if the given command exists on this system\n<p><code>command</code> &mdash; The command, as a String, to check for, ...\n\n"],["commands_from","GLI::App","classes/GLI/App.html#method-i-commands_from","(path)","<p>Loads ruby files in the load path that start with  <code>path</code>, which\nare presumed to be commands for your executable. ...\n"],["config_file","GLI::App","classes/GLI/App.html#method-i-config_file","(filename)","<p>Sets that this app uses a config file as well as the name of the config\nfile.\n<p><code>filename</code> &mdash; A String representing ...\n\n"],["d","GLI::DSL","classes/GLI/DSL.html#method-i-d","(description)",""],["default_command","GLI::App","classes/GLI/App.html#method-i-default_command","(command)","<p>Sets a default command to run when none is specified on the command line. \nNote that if you use this, ...\n"],["default_command","GLI::Command","classes/GLI/Command.html#method-i-default_command","(command_name)","<p>Set the default command if this command has subcommands and the user\ndoesn't  provide a subcommand when ...\n"],["default_desc","GLI::Command","classes/GLI/Command.html#method-i-default_desc","(desc)","<p>Describes this commands action block when it <strong>also</strong> has\nsubcommands. In this case, the GLI::DSL#desc value ...\n"],["default_size","GLI::Terminal","classes/GLI/Terminal.html#method-c-default_size","()","<p>Get the default size of the terminal when we can't figure it out\n<p>Returns an array of int [cols,rows]\n"],["default_size=","GLI::Terminal","classes/GLI/Terminal.html#method-c-default_size-3D","(size)","<p>Set the default size of the terminal to use when we can't figure it out\n<p><code>size</code> &mdash; array of two int [cols,rows] ...\n\n"],["default_value","GLI::DSL","classes/GLI/DSL.html#method-i-default_value","(val)","<p>set the default value of the next flag\n<p><code>val</code> &mdash; A String reprensenting the default value to be used for the ...\n\n"],["desc","GLI::DSL","classes/GLI/DSL.html#method-i-desc","(description)","<p>Describe the next switch, flag, or command.  This should be a short,\none-line description\n<p><code>description</code> ... &mdash; "],["exit_code","GLI::BadCommandLine","classes/GLI/BadCommandLine.html#method-i-exit_code","()",""],["exit_code","GLI::StandardException","classes/GLI/StandardException.html#method-i-exit_code","()",""],["exit_now!","GLI::App","classes/GLI/App.html#method-i-exit_now-21","(message,exit_code=1)","<p>Simpler means of exiting with a custom exit code.  This will  raise a\nCustomExit with the given message ...\n"],["f","GLI::DSL","classes/GLI/DSL.html#method-i-f","(*names)",""],["flag","GLI::DSL","classes/GLI/DSL.html#method-i-flag","(*names)","<p>Create a flag, which is a switch that takes an argument\n<p><code>names</code> &mdash; a String or Symbol, or an Array of String ...\n"],["help_now!","GLI::App","classes/GLI/App.html#method-i-help_now-21","(message)","<p>Exit now, showing the user help for the command they executed.  Use\n#exit_now! to just show the error ...\n"],["instance","GLI::Terminal","classes/GLI/Terminal.html#method-c-instance","()","<p>Provide access to the shared instance.\n"],["long_desc","GLI::DSL","classes/GLI/DSL.html#method-i-long_desc","(long_desc)","<p>Provide a longer, more detailed description.  This will be reformatted and\nwrapped to fit in the terminal's ...\n"],["new","GLI::Command","classes/GLI/Command.html#method-c-new","(options)","<p>Create a new command.\n<p>options &mdash; Keys should be:\n<p><code>names</code> &mdash; A String, Symbol, or Array of String or Symbol that ...\n"],["new","GLI::Commands::CompoundCommand","classes/GLI/Commands/CompoundCommand.html#method-c-new","(base,configuration,options={})","<p>base &mdash; object that respondes to <code>commands</code>\n<p>configuration &mdash; Array of arrays: index 0 is the array of names of ...\n\n"],["new","GLI::CustomExit","classes/GLI/CustomExit.html#method-c-new","(message,exit_code)","<p>Create a custom exit exception\n<p><code>message</code> &mdash; String containing error message to show the user\n<p><code>exit_code</code> &mdash; the exit ...\n"],["new","GLI::UnknownCommandArgument","classes/GLI/UnknownCommandArgument.html#method-c-new","(message,command)","<p><code>message</code> &mdash; the error message to show the user\n<p><code>command</code> &mdash; the command we were using to parse command-specific ...\n\n"],["on_error","GLI::App","classes/GLI/App.html#method-i-on_error","(&a_proc)","<p>Define a block to run if an error occurs. The block will receive any\nException that was caught. It should ...\n"],["post","GLI::App","classes/GLI/App.html#method-i-post","(&a_proc)","<p>Define a block to run after the command was executed, <strong>only if there\nwas not an error</strong>. The block will ...\n"],["pre","GLI::App","classes/GLI/App.html#method-i-pre","(&a_proc)","<p>Define a block to run after command line arguments are parsed but before\nany command is run.  If this ...\n"],["program_desc","GLI::App","classes/GLI/App.html#method-i-program_desc","(description=nil)","<p>Describe the overall application/programm.  This should be a one-sentence\nsummary of what your program ...\n"],["s","GLI::DSL","classes/GLI/DSL.html#method-i-s","(*names)",""],["size","GLI::Terminal","classes/GLI/Terminal.html#method-i-size","()","<p>Get the size of the current terminal. Ripped from hirb\n<p>Returns an Array of size two Ints representing ...\n"],["skips_post","GLI::App","classes/GLI/App.html#method-i-skips_post","()","<p>Use this if the following command should not have the post block executed.\nBy default, the post block ...\n"],["skips_pre","GLI::App","classes/GLI/App.html#method-i-skips_pre","()","<p>Use this if the following command should not have the pre block executed.\nBy default, the pre block is ...\n"],["switch","GLI::DSL","classes/GLI/DSL.html#method-i-switch","(*names)","<p>Create a switch, which is a command line flag that takes no arguments\n(thus, it <em>switches</em> something on) ...\n"],["use_openstruct","GLI::App","classes/GLI/App.html#method-i-use_openstruct","(use_openstruct)","<p>Call this with <code>true</code> will cause the <code>global_options</code>\nand <code>options</code> passed to your code to be wrapped in Options ...\n"],["version","GLI::App","classes/GLI/App.html#method-i-version","(version)","<p>Indicate the version of your application\n<p><code>version</code> &mdash; String containing the version of your application.\n\n"],["README","","files/README_rdoc.html","","<p>Git-Like Interface Command Line Parser\n<p><strong>This describes the forthcoming GLI2 and might not be 100%\naccurate</strong> ...\n"]]}}