var search_data = {"index":{"searchIndex":["gli","badcommandline","command","commandlinetoken","customexit","options","terminal","<=>()","[]()","[]=()","action()","arg_name()","arg_name()","c()","command()","command_exists?()","config_file()","d()","default_size()","default_size=()","default_value()","default_value()","desc()","desc()","exit_now!()","f()","flag()","flag()","instance()","long_desc()","long_desc()","make_unsafe!()","new()","new()","new()","on_error()","post()","pre()","program_name()","run()","s()","size()","switch()","switch()","use_openstruct()","version()","readme.rdoc","gli","gli.rb","command.rb","command_line_token.rb","exceptions.rb","flag.rb","options.rb","switch.rb","terminal.rb","gli_version.rb","help.rb","initconfig.rb","rdoc.rb","scaffold.rb"],"longSearchIndex":["lib/support/scaffold.rb","gli","gli","gli","gli","gli","gli","gli::commandlinetoken","gli::options","gli::options","gli::command","gli","gli::command","gli","gli","gli::terminal","gli","gli","gli::terminal","gli::terminal","gli","gli::command","gli","gli::command","gli","gli","gli","gli::command","gli::terminal","gli","gli::command","gli::terminal","gli::badcommandline","gli::commandlinetoken","gli::customexit","gli","gli","gli","gli","gli","gli","gli::terminal","gli","gli::command","gli","gli","files/readme_rdoc.html","files/bin/gli.html","files/lib/gli_rb.html","files/lib/gli/command_rb.html","files/lib/gli/command_line_token_rb.html","files/lib/gli/exceptions_rb.html","files/lib/gli/flag_rb.html","files/lib/gli/options_rb.html","files/lib/gli/switch_rb.html","files/lib/gli/terminal_rb.html","files/lib/gli_version_rb.html","files/lib/support/help_rb.html","files/lib/support/initconfig_rb.html","files/lib/support/rdoc_rb.html","files/lib/support/scaffold_rb.html"],"info":[["GLI","lib/gli/command.rb","classes/GLI.html"," < ","A means to define and parse a command line interface that works as Git's does, in that you specify global",1],["BadCommandLine","GLI","classes/GLI/BadCommandLine.html"," < Exception","Indicates that the command line invocation was bad ",1],["Command","GLI","classes/GLI/Command.html"," < CommandLineToken","A command to be run, in context of global flags and switches.  You are given an instance of this class",1],["CommandLineToken","GLI","classes/GLI/CommandLineToken.html"," < Object","Abstract base class for a logical element of a command line, mostly so that subclasses can have similar",1],["CustomExit","GLI","classes/GLI/CustomExit.html"," < Exception","Raise this if you want to use an exit status that isn't the default provided by GLI. Example: raise CustomExit.new(\"Not",1],["Options","GLI","classes/GLI/Options.html"," < OpenStruct","Subclass of OpenStruct that provides hash-like methods for #[] and #[]=.  Note that is is *not* a Hash.",1],["Terminal","GLI","classes/GLI/Terminal.html"," < Object","Class to encapsulate stuff about the terminal. This is useful to application developers as a canonical",1],["<=>","GLI::CommandLineToken","classes/GLI/CommandLineToken.html#M000018","(other)","Sort based on name ",2],["[]","GLI::Options","classes/GLI/Options.html#M000024","(k)","Return the value of an attribute ",2],["[]=","GLI::Options","classes/GLI/Options.html#M000025","(k, v)","Set the value of an attribute ",2],["action","GLI::Command","classes/GLI/Command.html#M000012","(&block)","Define the action to take when the user executes this command +block+:: A block of code to execute. ",2],["arg_name","GLI","classes/GLI.html#M000037","(name)","Describe the argument name of the next flag.  It's important to keep this VERY short and, ideally, without",2],["arg_name","GLI::Command","classes/GLI/Command.html#M000008","(name)","describe the argument name of the next flag, just as GLI#arg_name does. ",2],["c","GLI","classes/GLI.html#M000054","(*names)","Alias for #command",2],["command","GLI","classes/GLI.html#M000042","(*names)","Define a new command.  This takes a block that will be given an instance of the Command that was created.",2],["command_exists?","GLI::Terminal","classes/GLI/Terminal.html#M000030","(command)","Returns true if the given command exists on this system +command+:: The command, as a String, to check",2],["config_file","GLI","classes/GLI.html#M000041","(filename)","Sets that this app uses a config file as well as the name of the config file.   +filename+:: A String",2],["d","GLI","classes/GLI.html#M000051","(description)","Alias for #desc",2],["default_size","GLI::Terminal","classes/GLI/Terminal.html#M000026","()","Get the default size of the terminal when we can't figure it out Returns an array of int [cols,rows]",2],["default_size=","GLI::Terminal","classes/GLI/Terminal.html#M000027","(size)","Set the default size of the terminal to use when we can't figure it out +size+:: array of two int [cols,rows]",2],["default_value","GLI","classes/GLI.html#M000038","(val)","set the default value of the next flag +val+:: A String reprensenting the default value to be used for",2],["default_value","GLI::Command","classes/GLI/Command.html#M000009","(val)","set the default value of the next flag, just as GLI#default_value does. ",2],["desc","GLI","classes/GLI.html#M000035","(description)","Describe the next switch, flag, or command.  This should be a short, one-line description +description+::",2],["desc","GLI::Command","classes/GLI/Command.html#M000006","(description)","describe the next switch or flag just as GLI#desc does. ",2],["exit_now!","GLI","classes/GLI.html#M000049","(message,exit_code)","Simpler means of exiting with a custom exit code.  This will  raise a CustomExit with the given message",2],["f","GLI","classes/GLI.html#M000052","(*names)","Alias for #flag",2],["flag","GLI","classes/GLI.html#M000039","(*names)","Create a flag, which is a switch that takes an argument +names+:: a String or Symbol, or an Array of",2],["flag","GLI::Command","classes/GLI/Command.html#M000010","(*names)","Create a command-specific flag, similar to GLI#flag ",2],["instance","GLI::Terminal","classes/GLI/Terminal.html#M000028","()","Provide access to the shared instance.   ",2],["long_desc","GLI","classes/GLI.html#M000036","(long_desc)","Provide a longer, more detailed description.  This will be reformatted and wrapped to fit in the terminal's",2],["long_desc","GLI::Command","classes/GLI/Command.html#M000007","(long_desc)","set the long description of this flag/switch, just as GLI#long_desc does. ",2],["make_unsafe!","GLI::Terminal","classes/GLI/Terminal.html#M000029","()","Call this to cause methods to throw exceptions rather than return a sane default.  You probably don't",2],["new","GLI::BadCommandLine","classes/GLI/BadCommandLine.html#M000022","(message)","",2],["new","GLI::CommandLineToken","classes/GLI/CommandLineToken.html#M000016","(names,description,long_description=nil)","",2],["new","GLI::CustomExit","classes/GLI/CustomExit.html#M000023","(message,exit_code)","Create a custom exit exception +message+:: String containing error message to show the user +exit_code+::",2],["on_error","GLI","classes/GLI.html#M000045","(&a_proc)","Define a block to run if an error occurs. The block will receive any Exception that was caught. It should",2],["post","GLI","classes/GLI.html#M000044","(&a_proc)","Define a block to run after command hase been executed, only if there was not an error. The block will",2],["pre","GLI","classes/GLI.html#M000043","(&a_proc)","Define a block to run after command line arguments are parsed but before any command is run.  If this",2],["program_name","GLI","classes/GLI.html#M000050","(override=nil)","Set or get the name of the program, if you don't want the default (which is the name of the command line",2],["run","GLI","classes/GLI.html#M000048","(args)","Runs whatever command is needed based on the arguments.  +args+:: the command line ARGV array Returns",2],["s","GLI","classes/GLI.html#M000053","(*names)","Alias for #switch",2],["size","GLI::Terminal","classes/GLI/Terminal.html#M000031","()","Get the size of the current terminal. Ripped from hirb[https://github.com/cldwalker/hirb/blob/master/lib/hirb/util.rb]",2],["switch","GLI","classes/GLI.html#M000040","(*names)","Create a switch, which is a command line flag that takes no arguments (thus, it _switches_ something",2],["switch","GLI::Command","classes/GLI/Command.html#M000011","(*names)","Create a command-specific switch, similar to GLI#switch ",2],["use_openstruct","GLI","classes/GLI.html#M000047","(use_openstruct)","Call this with +true+ will cause the +global_options+ and +options+ passed to your code to be wrapped",2],["version","GLI","classes/GLI.html#M000046","(version)","Indicate the version of your application +version+:: String containing the version of your application.",2],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= Git-Like Interface Command Line Parser  Author::  Dave Copeland (mailto:davetron5000 at g mail dot",3],["gli","files/bin/gli.html","files/bin/gli.html","","1.9 adds realpath to resolve symlinks; 1.8 doesn't have this method, so we add it so we get resolved",3],["gli.rb","files/lib/gli_rb.html","files/lib/gli_rb.html","","",3],["command.rb","files/lib/gli/command_rb.html","files/lib/gli/command_rb.html","","",3],["command_line_token.rb","files/lib/gli/command_line_token_rb.html","files/lib/gli/command_line_token_rb.html","","",3],["exceptions.rb","files/lib/gli/exceptions_rb.html","files/lib/gli/exceptions_rb.html","","",3],["flag.rb","files/lib/gli/flag_rb.html","files/lib/gli/flag_rb.html","","",3],["options.rb","files/lib/gli/options_rb.html","files/lib/gli/options_rb.html","","",3],["switch.rb","files/lib/gli/switch_rb.html","files/lib/gli/switch_rb.html","","",3],["terminal.rb","files/lib/gli/terminal_rb.html","files/lib/gli/terminal_rb.html","","",3],["gli_version.rb","files/lib/gli_version_rb.html","files/lib/gli_version_rb.html","","",3],["help.rb","files/lib/support/help_rb.html","files/lib/support/help_rb.html","","",3],["initconfig.rb","files/lib/support/initconfig_rb.html","files/lib/support/initconfig_rb.html","","",3],["rdoc.rb","files/lib/support/rdoc_rb.html","files/lib/support/rdoc_rb.html","","",3],["scaffold.rb","files/lib/support/scaffold_rb.html","files/lib/support/scaffold_rb.html","","",3]]}}